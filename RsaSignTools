package org.hua.constant;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

/**
 * @author hua
 *
 */
public class RsaSignTools {
	
	/**
     * rsa签名
     * 
     * @param content
     *            待签名的字符串
     * @param privateKey
     *            rsa私钥字符串
     * @param charset
     *            字符编码
     * @return 签名结果
     * @throws Exception
     *             签名失败则抛出异常
     */
    public static String rsaSign(String content) throws SignatureException {
    	String charset = "utf-8";
        try {
        	Resource resource = new PathMatchingResourcePatternResolver().getResource("classpath:private.pem");
        	System.out.println(resource.getFilename());
        	byte[] privateKey = FileUtils.readFileToByteArray(resource.getFile());
			PrivateKey priKey = getPrivateKeyFromPKCS8("RSA", privateKey);

            Signature signature = Signature.getInstance("SHA1WithRSA");
            signature.initSign(priKey);
            if (StringUtils.isEmpty(charset)) {
                signature.update(content.getBytes());
            } else {
                signature.update(content.getBytes(charset));
            }

            byte[] signed = signature.sign();
            return new String(Base64.encodeBase64(signed));
        } catch (Exception e) {
            throw new SignatureException("RSAcontent = " + content + "; charset = " + charset, e);
        }
    }

    public static PrivateKey getPrivateKeyFromPKCS8(String algorithm, byte[] encodedKey) throws Exception {
        KeyFactory keyFactory = KeyFactory.getInstance(algorithm);
        encodedKey = Base64.decodeBase64(encodedKey);
        return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(encodedKey));
    }
    
    /**
     * php版
     * 
     * 
     * function sign($content, $rsaPrivateKeyPem) {
        $priKey = file_get_contents($rsaPrivateKeyPem);
        $res = openssl_get_privatekey($priKey);
        openssl_sign($content, $sign, $res);
        openssl_free_key($res);
        $sign = base64_encode($sign);
        return $sign;
    }
     * 
     * 
     * 
     * 
     * 
     * 
     * 
     * 
     * 
     * 
     */
    
    
    
    /**
     * rsa验签
     * 
     * @param content 被签名的内容
     * @param sign 签名后的结果
     * @param publicKey rsa公钥
     * @param charset 字符集
     * @return 验签结果
     * @throws SignatureException 验签失败，则抛异常
     */
    public static boolean doCheck(String content, String sign) throws SignatureException {
    	String charset = "utf-8";
        try {
        	
        	Resource resource = new PathMatchingResourcePatternResolver().getResource("classpath:public.pem");
        	System.out.println(resource.getFilename());
        	byte[] publicKey = FileUtils.readFileToByteArray(resource.getFile());
            PublicKey pubKey = getPublicKeyFromX509("RSA", publicKey);

            Signature signature = Signature.getInstance("SHA1WithRSA");
            signature.initVerify(pubKey);
            signature.update(getContentBytes(content, charset));
            return signature.verify(Base64.decodeBase64(sign.getBytes()));
        } catch (Exception e) {
            throw new SignatureException("RSA验证签名[content = " + content + "; charset = " + charset  + "; signature = " + sign + "]发生异常!", e);
        }
    }

    private static PublicKey getPublicKeyFromX509(String algorithm, byte[] publicKey) throws Exception {
        KeyFactory keyFactory = KeyFactory.getInstance(algorithm);
        // 先base64解码
        publicKey = Base64.decodeBase64(publicKey);
        return keyFactory.generatePublic(new X509EncodedKeySpec(publicKey));
    }

    private static byte[] getContentBytes(String content, String charset) throws Exception {
        if (StringUtils.isEmpty(charset)) {
            return content.getBytes();
        }
        return content.getBytes(charset);
    }
    
    public static void main(String[] args) {
    	try {
    		String content = "hello world!";
    		String sign = RsaSignTools.rsaSign(content);
    		System.out.println(sign);
    		boolean verify = RsaSignTools.doCheck(content, sign);
    		System.out.println(verify);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
